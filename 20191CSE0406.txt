
We will perform this entire task in 7 steps that includes:
EXPLORATORY DATA ANALYSIS(EDA)
DATA VISUALIZATION
PREPARING THE DATA
SPLITTING THE TRAINING AND TESTING DATA
MODEL CREATION AND TRAINING
COMPARING ACTUAL AND PREDICTED VALUES
MODEL EVALUATION
1. Exploratory Data Analysis(EDA)
In [1]:
# importing all the necessary libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plp
import seaborn as sns
In [2]:
# Reading the given data set using pandas library
df = pd.read_csv("http://bit.ly/w-data")
In [3]:
# Display all column names
df.columns
Out[3]:
Index(['Hours', 'Scores'], dtype='object')
In [4]:
# Display first five lines of data
df.head()
Out[4]:
Hours	Scores
0	2.5	21
1	5.1	47
2	3.2	27
3	8.5	75
4	3.5	30
In [5]:
df.size
Out[5]:
50
In [6]:
df.shape # it prints the total no. of columns and total no. of rows
Out[6]:
(25, 2)
In [7]:
#Finding number of null values or missing values in the given data
df.isnull().sum()
Out[7]:
Hours     0
Scores    0
dtype: int64
In [8]:
# Average of hours that a student study
df['Hours'].mean()
Out[8]:
5.012
In [9]:
#Describe the given data
df.describe()
Out[9]:
Hours	Scores
count	25.000000	25.000000
mean	5.012000	51.480000
std	2.525094	25.286887
min	1.100000	17.000000
25%	2.700000	30.000000
50%	4.800000	47.000000
75%	7.400000	75.000000
max	9.200000	95.000000
In [10]:
#more information about data
df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 25 entries, 0 to 24
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   Hours   25 non-null     float64
 1   Scores  25 non-null     int64  
dtypes: float64(1), int64(1)
memory usage: 528.0 bytes
2. Data Visualization
By using data visualization we can understand more about data, like relation between two features.

In [11]:
# taking Hours column in X-axis
x = df['Hours']
# taking Scores column in Y-axis
y = df['Scores']
In [12]:
# finding the relationship between hours and scores of student by using scatter plot.
plp.scatter(x,y)
Out[12]:
<matplotlib.collections.PathCollection at 0xb516948>

In [13]:
# finding the relationship between hours and scores of student by using regression plot.
sns.regplot(x,y)
Out[13]:
<matplotlib.axes._subplots.AxesSubplot at 0xbe8dc88>

In [14]:
# finding the speread of  Hours data using histogram plot.
sns.distplot(x)
Out[14]:
<matplotlib.axes._subplots.AxesSubplot at 0xbf18948>

In [15]:
# finding the speread of Scores data using histogram plot.
sns.distplot(y)
Out[15]:
<matplotlib.axes._subplots.AxesSubplot at 0xbf917c8>

In [16]:
plp.bar(x,y)
Out[16]:
<BarContainer object of 25 artists>

3. Preparing The Data
In [17]:
# Taking x as an independent variable and it must be in 2Dimentional-array
x=df[['Hours']]

# Taking y as a dependent variable and it must be in 1Dimentional-array
y=df['Scores']
In [18]:
x.head()
Out[18]:
Hours
0	2.5
1	5.1
2	3.2
3	8.5
4	3.5
In [19]:
y.head()
Out[19]:
0    21
1    47
2    27
3    75
4    30
Name: Scores, dtype: int64
In [20]:
x.shape
Out[20]:
(25, 1)
In [21]:
y.shape
Out[21]:
(25,)
4. Spliting The Training And Testing Data
We split the given data into train data for training the machine learning model and test data for testing that model.

In [22]:
#importing the necessary module for splitiing the data
from sklearn.model_selection import train_test_split
In [117]:
# Spliting the data.
X_train,x_test,Y_train,y_test=train_test_split(x,y)
In [118]:
X_train.shape
Out[118]:
(18, 1)
In [119]:
Y_train.shape
Out[119]:
(18,)
In [120]:
x_test.shape
Out[120]:
(7, 1)
In [121]:
y_test.shape
Out[121]:
(7,)
In [122]:
# Now the data is ready to create the model
5. Model Creation & Training
Here we will implement a linear regression model by using the train data.

In [123]:
#importing the model
from sklearn.linear_model import LinearRegression
In [124]:
#Creating the Model Object
model = LinearRegression()
In [125]:
# Training the model
model.fit(X_train,Y_train)
print("Model Training is Completed.")
Model Training is Completed.
In [126]:
# regression plot for training data.
sns.regplot(X_train,Y_train)
Out[126]:
<matplotlib.axes._subplots.AxesSubplot at 0xcc1ea48>

In [127]:
# regression plot for test data
sns.regplot(x_test,y_test)
Out[127]:
<matplotlib.axes._subplots.AxesSubplot at 0xdc4d6c8>

In [128]:
# predicting values for test data
predicted = model.predict(x_test)
In [138]:
predicted
Out[138]:
array([28.75648026, 26.82265248, 77.10217468, 51.96241358, 21.02116915,
       61.63155247, 36.49179136])
6. Comparing Actual and Predicted Values
In [129]:
# creating a data frame for y_test and predicted data.
diff = pd.DataFrame({"Actual":y_test,"Predicted":predicted})
In [137]:
diff
Out[137]:
Actual	Predicted
20	30	28.756480
16	30	26.822652
10	85	77.102175
1	47	51.962414
17	24	21.021169
18	67	61.631552
4	30	36.491791
In [136]:
# Comparing the actual and predicted values using bar graphs.
diff.plot(kind='bar')
Out[136]:
<matplotlib.axes._subplots.AxesSubplot at 0xdd9b208>

7. Model Evaluation
In [142]:
# importing the necessary metrics for modal evaluation
from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score
In [143]:
print(mean_absolute_error(y_test,predicted))
4.588596558948565
In [144]:
print(mean_squared_error(y_test,predicted))
25.497155599755526
In [145]:
print(r2_score(y_test,predicted))
0.9442846671250437
Given Problem Statement :
What will be predicted score if a student studies for 9.25 hrs/ day ?
In [147]:
hours = [[9.25]]

# making prediction
pred_score = model.predict(hours)

print("Hours Studied : {} \nScore Predicted : {}".format(hours,pred_score))
Hours Studied : [[9.25]] 
Score Predicted : [92.08933995]
[y = mx + c]
where both the variables should be quantitative.
Models: Those are output by algorithms and are comprised of model data and a prediction algorithm.

Training Model: In supervised learning, an ML Algorithm builds a model by examining many examples and attempting to find a model that minimizes loss and improves prediction accuracy.

These are the few terms used in machine learning while creating a model and to get familiar with. Now let’s get started with the analysis and prediction of the model.
This is about a fictional e-commerce company based in New York City that sells clothing online but they also have in-store style and clothing advice sessions. Customers come in to the store, have sessions/meetings with a personal stylist, then they can go home and order either on a mobile app or website for the clothes they want.
The company is trying to decide whether to focus their efforts on their mobile app experience or their website.
Data is fictional, including Email id's data and other personally identifiable information.
In this mini-project, I am going to use supervised data and simple linear regression for analysis and prediction. The Ultimate goal is the predict the company whether it has to focus on application or website development using the trained model to the highest achievable accuracy using available data.
This is an pratical application project to generalize them any one can change data set and some parameters to get the desired output
The steps involved are:
1.Loading the dataset.
2.Visualising the Data or exploring the data
3.Build the Model and Train it.
4.Evaluating the model.
5.Making a decision on the given data.
======================Importing libraries===========================
In [ ]:
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
====================Loading the dataset=====================
The 'Ecommerce Customers' dataset has Customer info, suchas Email, Address, and their color Avatar. Then it also has numerical value columns:

Avg. Session Length: Average session of in-store style advice sessions.
Time on App: Average time spent on App in minutes
Time on Website: Average time spent on Website in minutes
Length of Membership: How many years the customer has been a member.

In [ ]:
df=pd.read_csv("/content/Ecommerce Customers.txt",sep=",")
print("Data frame created successfuly")
Data frame created successfuly
In [ ]:
print("top 5 rows\n")
df.head()
top 5 rows
Out[ ]:
